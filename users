import { initializeApp } from 'https://www.gstatic.com/firebasejs/9.6.11/firebase-app.js';
import { getAuth, signInWithEmailAndPassword, createUserWithEmailAndPassword, signOut, onAuthStateChanged, sendPasswordResetEmail } from 'https://www.gstatic.com/firebasejs/9.6.11/firebase-auth.js';
import { getFirestore, collection, getDocs, addDoc, serverTimestamp, updateDoc, doc, query, where, orderBy } from 'https://www.gstatic.com/firebasejs/9.6.11/firebase-firestore.js';

// Firebase configuration
const firebaseConfig = {
    apiKey: "AIzaSyAolcB_o6f1CQPbLSYrMKTYaz_xYs54khY",
    authDomain: "quizapp-1ae20.firebaseapp.com",
    projectId: "quizapp-1ae20",
    storageBucket: "quizapp-1ae20.appspot.com",
    messagingSenderId: "626886802317",
    appId: "1:626886802317:web:df08c307697ca235c45bc4",
    measurementId: "G-NKJTC5C1XW"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
const db = getFirestore(app);

// Initialize quiz state
let quizData = [];
let userAnswers = {};
let currentQuestionIndex = 0;
let timer;
const TIME_PER_QUESTION = 60; // 1 minute per question
let timeLeft = TIME_PER_QUESTION;

// Event listeners for authentication
document.getElementById('login-btn').addEventListener('click', async () => {
    const email = document.getElementById('email').value;
    const password = document.getElementById('password').value;

    try {
        const userCredential = await signInWithEmailAndPassword(auth, email, password);
        const user = userCredential.user;

        // Fetch user data including username
        const userDoc = await getDocs(query(collection(db, 'users'), where('uid', '==', user.uid)));
        if (!userDoc.empty) {
            const userData = userDoc.docs[0].data();
            handleUserRedirect(userData); // Pass userData instead of just user
        }
    } catch (error) {
        alert('Login Failed: ' + error.message);
    }
});

document.getElementById('register-btn').addEventListener('click', async () => {
    const email = document.getElementById('email').value;
    const password = document.getElementById('password').value;
    const username = document.getElementById('username').value;

    try {
        const userCredential = await createUserWithEmailAndPassword(auth, email, password);
        const user = userCredential.user;

        // Save username and additional user data to Firestore
        await addDoc(collection(db, 'users'), {
            uid: user.uid,
            email: email,
            username: username,
            score: 0 // Initialize score
        });

        alert('Registration successful! Please login.');
    } catch (error) {
        alert('Registration Failed: ' + error.message);
    }
});

document.getElementById('logout-btn').addEventListener('click', () => {
    signOut(auth).then(() => {
        document.getElementById('auth-container').style.display = 'block';
        document.getElementById('quiz-container').style.display = 'none';
        document.getElementById('result-container').style.display = 'none';
        document.getElementById('admin-dashboard').style.display = 'none';
        document.getElementById('view-results').style.display = 'none';
    }).catch((error) => {
        console.error('Logout Error:', error);
    });
});

// Redirect user based on role
async function handleUserRedirect(userData) {
    if (userData.email === 'challawaheed@gmail.com') {
        document.getElementById('admin-dashboard').style.display = 'block';
        document.getElementById('quiz-container').style.display = 'none';
        document.getElementById('auth-container').style.display = 'none';
        document.getElementById('result-container').style.display = 'none';
        document.getElementById('view-results').style.display = 'none';
        await loadAdminData();
    } else {
        document.getElementById('auth-container').style.display = 'none';
        document.getElementById('quiz-container').style.display = 'block';
        document.getElementById('result-container').style.display = 'none';
        document.getElementById('admin-dashboard').style.display = 'none';
        document.getElementById('view-results').style.display = 'block';
        startQuiz();
    }

    // Display username if needed
    document.getElementById('username-display').textContent = `Welcome, ${userData.username}`;
}

// Start the quiz and load questions
function startQuiz() {
    userAnswers = {};
    quizData = [];
    currentQuestionIndex = 0;
    document.getElementById('question-container').innerHTML = '';
    loadQuizData();
}

// Load quiz data from Firestore
async function loadQuizData() {
    const querySnapshot = await getDocs(collection(db, 'questions'));
    querySnapshot.forEach(doc => {
        quizData.push({
            id: doc.id,
            ...doc.data()
        });
    });
    renderQuestion();
}

// Render the current question to the DOM
function renderQuestion() {
    const question = quizData[currentQuestionIndex];
    const questionContainer = document.getElementById('question-container');
    questionContainer.innerHTML = `
        <h2>${currentQuestionIndex + 1}. ${question.question}</h2>
        ${question.options.map(option => `
            <div class="option" data-id="${question.id}" data-option="${option}">
                ${option}
            </div>
        `).join('')}
    `;

    document.querySelectorAll('.option').forEach(option => {
        option.addEventListener('click', (e) => {
            const selectedOption = e.target.dataset.option;
            userAnswers[question.id] = selectedOption;
            document.querySelectorAll('.option').forEach(opt => {
                opt.classList.remove('selected');
            });
            e.target.classList.add('selected');
        });
    });

    document.getElementById('previous-question').style.display = currentQuestionIndex === 0 ? 'none' : 'block';
    document.getElementById('next-question').style.display = currentQuestionIndex === quizData.length - 1 ? 'none' : 'block';
    document.getElementById('submit-quiz').style.display = currentQuestionIndex === quizData.length - 1 ? 'block' : 'none';

    timeLeft = TIME_PER_QUESTION;
    startTimer();
}

// Handle navigation between questions
document.getElementById('next-question').addEventListener('click', () => {
    currentQuestionIndex++;
    renderQuestion();
});

document.getElementById('previous-question').addEventListener('click', () => {
    currentQuestionIndex--;
    renderQuestion();
});

// Start the timer
function startTimer() {
    timeLeft = TIME_PER_QUESTION; // Reset the time left to 1 minute
    const timerElement = document.getElementById('time');
    
    clearInterval(timer); // Clear any existing timer

    timer = setInterval(() => {
        const minutes = Math.floor(timeLeft / 60);
        const seconds = timeLeft % 60;
        
        // Format seconds to always show two digits
        timerElement.textContent = `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
        
        // Decrement the time left by 1 second
        timeLeft--;
        
        // If time runs out, handle the end of the question
        if (timeLeft < 0) {
            clearInterval(timer);
            if (currentQuestionIndex < quizData.length - 1) {
                currentQuestionIndex++;
                renderQuestion();
            } else {
                submitQuiz();
            }
        }
    }, 1000); // Run every 1 second
}

// Submit the quiz and evaluate results
document.getElementById('submit-quiz').addEventListener('click', submitQuiz);

async function submitQuiz() {
    clearInterval(timer);
    let correctAnswers = 0;
    const resultsContainer = document.getElementById('results');
    resultsContainer.innerHTML = '';

    quizData.forEach(question => {
        const userAnswer = userAnswers[question.id];
        const isCorrect = userAnswer === question.correctAnswer;
        if (isCorrect) {
            correctAnswers++;
        }

        resultsContainer.innerHTML += `
            <div class="result-item ${isCorrect ? 'correct' : 'incorrect'}">
                <h3>${question.question}</h3>
                <p><strong>Correct Answer:</strong> ${question.correctAnswer}</p>
                <p><strong>Your Answer:</strong> ${userAnswer || 'Not Answered'}</p>
            </div>
        `;
    });

    // Save results to Firestore
    await saveResultsToFirestore(correctAnswers, quizData.length);

    document.getElementById('quiz-container').style.display = 'none';
    document.getElementById('result-container').style.display = 'block';
}

async function saveResultsToFirestore(score, total) {
    const user = auth.currentUser;
    if (user) {
        // Update user's score
        await updateDoc(doc(db, 'users', user.uid), {
            score: score
        });

        // Save results to userResults collection
        await addDoc(collection(db, 'userResults'), {
            userId: user.uid,
            score: score,
            total: total,
            timestamp: serverTimestamp()
        });
    }
}

document.getElementById('retry-quiz').addEventListener('click', () => {
    startQuiz();
    document.getElementById('result-container').style.display = 'none';
    document.getElementById('quiz-container').style.display = 'block';
});

// Load admin data
async function loadAdminData() {
    const querySnapshot = await getDocs(collection(db, 'userResults'));
    const adminResultsContainer = document.getElementById('admin-results');
    adminResultsContainer.innerHTML = '';

    for (const doc of querySnapshot.docs) {
        const data = doc.data();
        
        // Fetch user data for each result
        const userDoc = await getDocs(query(collection(db, 'users'), where('uid', '==', data.userId)));
        const userData = userDoc.docs[0].data();

        adminResultsContainer.innerHTML += `
            <div class="admin-result-item">
                <h3>Username: ${userData.username}</h3>
                <p><strong>Email:</strong> ${userData.email}</p>
                <p><strong>Score:</strong> ${data.score} / ${data.total}</p>
                <p><strong>Date:</strong> ${data.timestamp.toDate().toLocaleString()}</p>
            </div>
        `;
    }

    // Load user data for admin
    const usersSnapshot = await getDocs(collection(db, 'users'));
    usersSnapshot.forEach(userDoc => {
        const userData = userDoc.data();
        adminResultsContainer.innerHTML += `
            <div class="admin-user-item">
                <h3>Email: ${userData.email}</h3>
                <p><strong>Username:</strong> ${userData.username}</p>
                <p><strong>Score:</strong> ${userData.score || 'No score available'}</p>
            </div>
        `;
    });
}

// Show leaderboard to users
async function showLeaderboard() {
    const leaderboardContainer = document.getElementById('leaderboard');
    leaderboardContainer.innerHTML = '';

    // Fetch top scores
    const leaderboardQuery = query(collection(db, 'users'), orderBy('score', 'desc'));
    const leaderboardSnapshot = await getDocs(leaderboardQuery);

    leaderboardSnapshot.forEach(userDoc => {
        const userData = userDoc.data();
        leaderboardContainer.innerHTML += `
            <div class="leaderboard-item">
                <h3>${userData.username}</h3>
                <p><strong>Email:</strong> ${userData.email}</p>
                <p><strong>Score:</strong> ${userData.score || 'No score available'}</p>
            </div>
        `;
    });
}

// Auto-login on page load if user is already logged in
onAuthStateChanged(auth, async (user) => {
    if (user) {
        const userDoc = await getDocs(query(collection(db, 'users'), where('uid', '==', user.uid)));
        if (!userDoc.empty) {
            const userData = userDoc.docs[0].data();
            handleUserRedirect(userData); // Pass userData instead of just user
        }
    } else {
        document.getElementById('auth-container').style.display = 'block';
        document.getElementById('quiz-container').style.display = 'none';
        document.getElementById('result-container').style.display = 'none';
        document.getElementById('admin-dashboard').style.display = 'none';
        document.getElementById('view-results').style.display = 'none';
    }
});

// Add question functionality for admin
document.getElementById('add-question-btn').addEventListener('click', async () => {
    const questionText = document.getElementById('question-text').value;
    const options = [
        document.getElementById('option1').value,
        document.getElementById('option2').value,
        document.getElementById('option3').value,
        document.getElementById('option4').value
    ];
    const correctAnswer = document.getElementById('correct-answer').value;

    if (questionText && options.length === 4 && correctAnswer) {
        await addDoc(collection(db, 'questions'), {
            question: questionText,
            options: options,
            correctAnswer: correctAnswer
        });

        alert('Question added successfully!');

        document.getElementById('question-text').value = '';
        document.getElementById('option1').value = '';
        document.getElementById('option2').value = '';
        document.getElementById('option3').value = '';
        document.getElementById('option4').value = '';
        document.getElementById('correct-answer').value = '';
    } else {
        alert('Please fill all fields correctly.');
    }
});

document.getElementById('reset-password-btn').addEventListener('click', () => {
    const email = document.getElementById('reset-email').value;
    sendPasswordResetEmail(auth, email)
        .then(() => {
            alert('Password reset email sent!');
        })
        .catch(error => {
            alert('Error: ' + error.message);
        });
});
